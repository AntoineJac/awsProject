AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  MarketingCloudCustomActivityMultiChoice

  SAM Template for MultiChoice Marketing Cloud Custom Activity

Globals:
  Function:
    Timeout: 3
    Runtime: nodejs14.x
    Architectures: 
      - x86_64
    MemorySize: 128
    EventInvokeConfig: 
      MaximumEventAgeInSeconds: 60
      MaximumRetryAttempts: 2
Parameters:
    JwtTokenSecretMC:
        Description: 'Marketing Cloud JWT Token'
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: 'JwtTokenSecretMC'
    SmsApiGatewayKey:
        Description: 'API SMS Gateway Key'
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: 'SmsApiGatewayKey'
    EndpointUrlSMS:
        Description: 'API SMS Gateway Endpoint URL'
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: 'EndpointUrlSMS'
    SmsApiConcurrency:
        Description: 'API SMS Gateway Concurrency'
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: 'SmsApiConcurrency'
Resources:
  HttpSmsMcApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefaultRouteSettings:
        ThrottlingBurstLimit: 150 #Set to 150 conccurent request
        ThrottlingRateLimit: 1000 #Set to 1000 qps => 3.6m by hour
  SmsDeadQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-SmsDeadQueue'
      ReceiveMessageWaitTimeSeconds: 20
  SmsApiQueue: 
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-SmsApiQueue'
      VisibilityTimeout: 30
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt: 
            - 'SmsDeadQueue'
            - 'Arn'
        maxReceiveCount: 2
  ExecuteEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ExecuteEntryFunction'
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'lambda:InvokeAsyncs'
                - 'lambda:InvokeFunction'
                - 'sqs:SendMessage'
              Resource:
                - '*'
      Environment:
        Variables:
          MCSecret: !Ref JwtTokenSecretMC
      CodeUri: lambdas/executeEntry/
      Handler: app.lambdaHandler
      Layers:
              - !Ref JsonWebTokenLayer
      Events:
        ExecuteEntry:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpSmsMcApi
            Path: /execute
            Method: POST
            TimeoutInMillis: 10000
  PublishEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-PublishEntryFunction'
      Environment:
        Variables:
          MCSecret: !Ref JwtTokenSecretMC
      CodeUri: lambdas/publishEntry/
      Handler: app.lambdaHandler
      Layers:
              - !Ref JsonWebTokenLayer
      Events:
        PublishEntry:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpSmsMcApi
            Path: /publish
            Method: POST
            TimeoutInMillis: 10000
        ValidateEntry:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpSmsMcApi
            Path: /validate
            Method: POST
            TimeoutInMillis: 10000
        SaveEntry:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpSmsMcApi
            Path: /save
            Method: POST
            TimeoutInMillis: 10000
  CallSmsApiFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CallSmsApiFunction'
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'sqs:ReceiveMessage'
              Resource:
                - '*'
      Environment:
        Variables:
          SmsApiGatewayKey: !Ref SmsApiGatewayKey
          EndpointUrlSMS: !Ref EndpointUrlSMS
      CodeUri: lambdas/callSmsApi/
      Handler: app.lambdaHandler
      ReservedConcurrentExecutions: !Ref SmsApiConcurrency
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 300
        MaximumRetryAttempts: 1
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: 
              Fn::GetAtt: 
                - 'SmsApiQueue'
                - 'Arn'
            MaximumBatchingWindowInSeconds: 30
            BatchSize: 1
  JsonWebTokenLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: web-token-dependencies
            Description: Dependencies for sam app [web-token]
            ContentUri: dependencies/
            CompatibleRuntimes:
              - nodejs6.10
              - nodejs8.10
              - nodejs14.x
            LicenseInfo: 'MIT'
            RetentionPolicy: Retain

Outputs:
  ExecuteApiUrl:
    Description: 'API Gateway endpoint URL for Prod stage for Execute function'
    Value: !Sub 'https://${HttpSmsMcApi}.execute-api.${AWS::Region}.amazonaws.com/'
  ExecuteEntryFunction:
    Description: 'Lambda Function called by Executed route'
    Value: !GetAtt ExecuteEntryFunction.Arn
  ExecuteEntryFunctionIamRole:
    Description: 'Implicit IAM Role created for Execute function'
    Value: !GetAtt ExecuteEntryFunctionRole.Arn
  PublishEntryFunction:
    Description: 'Lambda Function called by Save, Validate and Publish routes'
    Value: !GetAtt PublishEntryFunction.Arn
  PublishEntryFunctionIamRole:
    Description: 'Implicit IAM Role created for Publish function'
    Value: !GetAtt PublishEntryFunctionRole.Arn
  CallSmsApiFunction:
    Description: 'Call SMS APILambda Function ARN'
    Value: !GetAtt CallSmsApiFunction.Arn
  CallSmsApiFunctionIamRole:
    Description: 'Implicit IAM Role created for CallSmsApi function'
    Value: !GetAtt CallSmsApiFunctionRole.Arn
  SmsApiQueue:
    Description: 'SMS API Queue ARN'
    Value: !GetAtt SmsApiQueue.Arn
  SmsDeadQueue:
    Description: 'SMS API Dead Queue ARN'
    Value: !GetAtt SmsDeadQueue.Arn
